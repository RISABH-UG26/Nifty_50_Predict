// NIFTY 50 Intraday Trading Strategy using Sentiment-Driven LSTM Signals
// Based on: LSTM + Sentiment Approach for Price Prediction
// Author: Risabh
// Purpose: Intraday trading with sentiment-based entry/exit signals
// Timeframe: 5min or 15min recommended for intraday
// ================================================================

//@version=6
strategy("Sentiment-Driven LSTM Intraday Strategy v2", 
         overlay=true, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=50,
         commission_type=strategy.commission.percent,
         commission_value=0.05)

// ================================================================
// INPUT PARAMETERS
// ================================================================

// Market Conditions
input_vix = ta.highest(high, 14) - ta.lowest(low, 14)  // Volatility proxy
input_volume = volume
input_price = close

// LSTM-like Signal Calculation (Simplified Neural Network approach)
// We'll use technical indicators to approximate LSTM sentiment signals

// 1. PRICE MOMENTUM (LSTM Feature 1: Price trajectory)
momentum_length = input.int(10, title="Momentum Period", minval=5, maxval=50)
price_momentum = (close - ta.sma(close, momentum_length)) / ta.sma(close, momentum_length) * 100

// 2. VOLATILITY SENTIMENT (LSTM Feature 2: VIX-like indicator)
volatility_length = input.int(14, title="Volatility Period", minval=5, maxval=50)
volatility_sentiment = (input_vix - ta.sma(input_vix, volatility_length)) / ta.sma(input_vix, volatility_length) * 100

// 3. VOLUME SENTIMENT (LSTM Feature 3: Market interest)
volume_length = input.int(20, title="Volume Period", minval=5, maxval=50)
volume_sentiment = (volume - ta.sma(volume, volume_length)) / ta.sma(volume, volume_length) * 100

// 4. OHLC PATTERN SENTIMENT (LSTM Feature 4: OHLCV patterns)
ohlc_strength = ((close - open) / (high - low + 0.0001)) * 100

// 5. TREND SENTIMENT (LSTM Feature 5: Multi-timeframe trend)
trend_short = ta.sma(close, 5) - ta.sma(close, 10)
trend_medium = ta.sma(close, 20) - ta.sma(close, 50)
trend_sentiment = (trend_short + trend_medium) / 2

// ================================================================
// COMPOSITE SENTIMENT SCORE (Approximating LSTM Output)
// ================================================================

// Weights for different sentiment components (can be optimized)
weight_momentum = input.float(0.25, title="Weight: Price Momentum", minval=0, maxval=1, step=0.05)
weight_volatility = input.float(0.20, title="Weight: Volatility", minval=0, maxval=1, step=0.05)
weight_volume = input.float(0.20, title="Weight: Volume", minval=0, maxval=1, step=0.05)
weight_ohlc = input.float(0.20, title="Weight: OHLC Pattern", minval=0, maxval=1, step=0.05)
weight_trend = input.float(0.15, title="Weight: Trend", minval=0, maxval=1, step=0.05)

// Composite Sentiment Score (-100 to +100)
sentiment_score_numerator = (weight_momentum * price_momentum + 
                             weight_volatility * volatility_sentiment + 
                             weight_volume * volume_sentiment + 
                             weight_ohlc * ohlc_strength + 
                             weight_trend * trend_sentiment)
sentiment_score_denominator = (weight_momentum + weight_volatility + weight_volume + weight_ohlc + weight_trend)
sentiment_score = sentiment_score_numerator / sentiment_score_denominator

// Normalize sentiment score
normalized_sentiment = ta.sma(sentiment_score, 3)  // 3-bar smoothing

// ================================================================
// SIGNAL GENERATION
// ================================================================

// Entry Thresholds
entry_threshold_buy = input.int(30, title="Entry Threshold: BUY (>)", minval=0, maxval=100)
entry_threshold_sell = input.int(-30, title="Entry Threshold: SELL (<)", minval=-100, maxval=0)

// Exit Thresholds (Profit Taking)
profit_threshold = input.float(10, title="Profit Taking Threshold", minval=0, maxval=100)

// Stop Loss Percentage
stop_loss_pct = input.float(1.5, title="Stop Loss %", minval=0.5, maxval=5, step=0.1)

// Position Holding Duration (bars for intraday)
max_hold_duration = input.int(60, title="Max Hold Duration (bars)", minval=10, maxval=480)

// ================================================================
// TREND CONFIRMATION (Using RSI + ATR for trend strength)
// ================================================================

rsi_length = input.int(14, title="RSI Period for Trend", minval=5, maxval=50)
rsi_value = ta.rsi(close, rsi_length)

// Trend strength based on RSI
// RSI > 50 = Uptrend, RSI < 50 = Downtrend
// RSI > 70 = Very strong uptrend, RSI < 30 = Very strong downtrend
trend_strength_threshold = input.float(40, title="Trend Strength (RSI)", minval=20, maxval=80)

// ================================================================
// BUY SIGNAL CONDITIONS (STRICTER)
// ================================================================

// BUY: Strong sentiment + momentum + volume + trend confirmation
buy_condition_1 = normalized_sentiment > (entry_threshold_buy + 10)  // Stronger sentiment needed
buy_condition_2 = price_momentum > 5  // Positive momentum required
buy_condition_3 = volume_sentiment > 5  // Volume must confirm
buy_condition_4 = rsi_value > trend_strength_threshold  // Strong uptrend (RSI > 40)
buy_condition_5 = close > ta.sma(close, 20)  // Price above 20-MA
buy_condition_all = buy_condition_1 and buy_condition_2 and buy_condition_3 and buy_condition_4 and buy_condition_5

// SELL SIGNAL CONDITIONS (STRICTER)
// SELL: Strong negative sentiment + momentum + volume + trend confirmation
sell_condition_1 = normalized_sentiment < (entry_threshold_sell - 10)  // Stronger negative sentiment
sell_condition_2 = price_momentum < -5  // Negative momentum required
sell_condition_3 = volume_sentiment < -5  // Volume must confirm
sell_condition_4 = rsi_value < (100 - trend_strength_threshold)  // Strong downtrend (RSI < 60)
sell_condition_5 = close < ta.sma(close, 20)  // Price below 20-MA
sell_condition_all = sell_condition_1 and sell_condition_2 and sell_condition_3 and sell_condition_4 and sell_condition_5

// ================================================================
// EXIT SIGNAL CONDITIONS (IMPROVED)
// ================================================================

// Track entry price
var float entry_price = 0

// Exit on profit target (LONG)
exit_profit = strategy.position_size > 0 and close > strategy.position_avg_price * (1 + profit_threshold / 100)

// Exit on stop loss (LONG) - Better calculation
exit_stoploss = strategy.position_size > 0 and close < strategy.position_avg_price * (1 - stop_loss_pct / 100)

// Exit on profit target (SHORT)
exit_profit_short = strategy.position_size < 0 and close < strategy.position_avg_price * (1 - profit_threshold / 100)

// Exit on stop loss (SHORT)
exit_stoploss_short = strategy.position_size < 0 and close > strategy.position_avg_price * (1 + stop_loss_pct / 100)

// Exit on time
bars_held = strategy.opentrades > 0 ? bar_index - strategy.opentrades.entry_bar_index(0) : 0
exit_time = bars_held >= max_hold_duration and strategy.opentrades > 0

// Exit on sentiment reversal (stronger reversal needed)
exit_sentiment = strategy.position_size > 0 and normalized_sentiment < 0
exit_sentiment_short = strategy.position_size < 0 and normalized_sentiment > 0

// ================================================================
// EXECUTION
// ================================================================

// Entry Orders
if buy_condition_all and strategy.position_size == 0
    strategy.entry("BUY", strategy.long)
    alert("üü¢ BUY SIGNAL - Sentiment: " + str.tostring(normalized_sentiment, "0.0"))

if sell_condition_all and strategy.position_size == 0
    strategy.entry("SELL", strategy.short)
    alert("üî¥ SELL SIGNAL - Sentiment: " + str.tostring(normalized_sentiment, "0.0"))

// Exit Orders - Priority: Profit > StopLoss > Sentiment > Time
if strategy.position_size > 0
    if exit_profit
        strategy.close("BUY")
        alert("‚úÖ CLOSE: Profit Target Hit")
    else if exit_stoploss
        strategy.close("BUY")
        alert("‚ö†Ô∏è CLOSE: Stop Loss Hit")
    else if exit_sentiment
        strategy.close("BUY")
        alert("üîÑ CLOSE: Sentiment Reversal")
    else if exit_time
        strategy.close("BUY")
        alert("‚è±Ô∏è CLOSE: Time Exit")

if strategy.position_size < 0
    if exit_profit_short
        strategy.close("SELL")
        alert("‚úÖ CLOSE: Profit Target Hit")
    else if exit_stoploss_short
        strategy.close("SELL")
        alert("‚ö†Ô∏è CLOSE: Stop Loss Hit")
    else if exit_sentiment_short
        strategy.close("SELL")
        alert("üîÑ CLOSE: Sentiment Reversal")
    else if exit_time
        strategy.close("SELL")
        alert("‚è±Ô∏è CLOSE: Time Exit")

// ================================================================
// VISUALIZATION
// ================================================================

// Plot Sentiment Score
plot(normalized_sentiment, title="Sentiment Score", color=color.blue, linewidth=2)

// Plot Buy/Sell Thresholds
hline(entry_threshold_buy, title="Buy Threshold", color=color.green, linestyle=hline.style_dashed, linewidth=1)
hline(entry_threshold_sell, title="Sell Threshold", color=color.red, linestyle=hline.style_dashed, linewidth=1)
hline(0, title="Neutral", color=color.gray, linestyle=hline.style_dotted, linewidth=1)

// Highlight Buy/Sell Zones
buy_zone = normalized_sentiment > entry_threshold_buy
sell_zone = normalized_sentiment < entry_threshold_sell
bgcolor(buy_zone ? color.new(color.green, 90) : na, title="Buy Zone")
bgcolor(sell_zone ? color.new(color.red, 90) : na, title="Sell Zone")

// Plot momentum
plot(price_momentum, title="Price Momentum", color=color.orange, linewidth=1, display=display.none)

// ================================================================
// INFOBOX - Display Key Metrics
// ================================================================

var table info_table = table.new(position.top_right, 
                                 columns=2, 
                                 rows=8,
                                 bgcolor=color.new(color.white, 80),
                                 border_color=color.black,
                                 border_width=1)

if barstate.islast
    // Sentiment Score
    table.cell(info_table, 0, 0, "Sentiment:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 0, str.tostring(normalized_sentiment, "0.00"), 
               text_color=normalized_sentiment > 0 ? color.green : color.red, bgcolor=color.white)
    
    // Momentum
    table.cell(info_table, 0, 1, "Momentum:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 1, str.tostring(price_momentum, "0.00"), 
               text_color=price_momentum > 0 ? color.green : color.red, bgcolor=color.white)
    
    // Volume Sentiment
    table.cell(info_table, 0, 2, "Volume Sent:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 2, str.tostring(volume_sentiment, "0.00"), 
               text_color=volume_sentiment > 0 ? color.green : color.red, bgcolor=color.white)
    
    // Trend
    table.cell(info_table, 0, 3, "Trend Sent:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 3, str.tostring(trend_sentiment, "0.00"), 
               text_color=trend_sentiment > 0 ? color.green : color.red, bgcolor=color.white)
    
    // Position Size
    table.cell(info_table, 0, 4, "Position:", text_color=color.black, bgcolor=color.gray)
    pos_text = strategy.position_size > 0 ? "LONG" : strategy.position_size < 0 ? "SHORT" : "NONE"
    pos_color = strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.gray
    table.cell(info_table, 1, 4, pos_text, text_color=pos_color, bgcolor=color.white)
    
    // Win Rate
    table.cell(info_table, 0, 5, "Win Rate:", text_color=color.black, bgcolor=color.gray)
    total_trades = strategy.wintrades + strategy.losstrades
    win_rate = total_trades > 0 ? (strategy.wintrades / total_trades) * 100 : 0
    table.cell(info_table, 1, 5, str.tostring(win_rate, "0.0") + "%", 
               text_color=color.blue, bgcolor=color.white)
    
    // Profit
    table.cell(info_table, 0, 6, "Profit:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 6, str.tostring(strategy.netprofit, "0.00"), 
               text_color=strategy.netprofit > 0 ? color.green : color.red, bgcolor=color.white)
    
    // Equity
    table.cell(info_table, 0, 7, "Equity:", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 7, str.tostring(strategy.equity, "0.00"), 
               text_color=color.blue, bgcolor=color.white)


// ================================================================
// STRATEGY NOTES
// ================================================================
// 
// HOW TO USE:
// 1. Add this script to your TradingView chart
// 2. Set timeframe to 5min or 15min for intraday trading
// 3. Apply to NIFTY50 chart (NSE:NIFTY)
// 4. Adjust parameters based on backtesting results
// 5. Enable alerts for mobile notifications
// 6. Set fixed risk/reward ratio in strategy settings
//
// KEY FEATURES:
// - Sentiment Score: Weighted combination of multiple indicators
// - Automatic Entry/Exit based on sentiment and volume
// - Dynamic profit taking and stop loss
// - Real-time visualization of sentiment levels
// - Win rate tracking and equity monitoring
// - Alert notifications for trading signals
//
// PARAMETERS TO OPTIMIZE:
// - Entry Thresholds (30 and -30 are starting points)
// - Profit Taking Threshold (target %)
// - Stop Loss % (risk management)
// - Hold Duration (max bars in trade)
// - Indicator weights (adjust based on market condition)
// - Period lengths (momentum, volatility, volume)
//
// RISK MANAGEMENT:
// - Always use stop loss (default 1.5%)
// - Position size: Start with 50% equity
// - Max drawdown monitoring
// - Never trade against trend confirmation
//
// ================================================================
